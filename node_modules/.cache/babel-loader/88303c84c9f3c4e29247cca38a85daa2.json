{"ast":null,"code":"import _defineProperty from \"/Users/james/Desktop/algorithm_/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/james/Desktop/algorithm_/src/PathfindingVisualizer/PathfindingVisualizer.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Joyride from 'react-joyride';\nimport Node from './Node/Node';\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\nimport './PathfindingVisualizer.css';\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      steps: [{\n        target: '#buttonTour',\n        content: 'This is my awesome feature!'\n      }, {\n        target: '#node-10-15',\n        content: 'This another awesome feature!'\n      }],\n      run: true\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(\"node-\".concat(node.row, \"-\").concat(node.col)).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(\"node-\".concat(node.row, \"-\").concat(node.col)).className = 'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const grid = this.state.grid;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder); //change the color of BUTTON to red once button is clicked\n\n    var x = document.getElementById(\"buttonVisualizeDijkstra\");\n    x.style.color = \"red\";\n  }\n\n  refreshPage() {\n    window.location.reload();\n  }\n\n  render() {\n    const _this$state = this.state,\n          grid = _this$state.grid,\n          mouseIsPressed = _this$state.mouseIsPressed,\n          steps = _this$state.steps,\n          run = _this$state.run;\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"  Dijkstra's Algorithm Visualize\")), React.createElement(Joyride, {\n      run: run,\n      steps: steps,\n      continuous: true,\n      showProgress: true,\n      showSkipButton: true,\n      styles: {\n        options: {\n          arrowColor: '#e3ffeb',\n          backgroundColor: '#e3ffeb',\n          overlayColor: 'rgba(79, 26, 0, 0.4)',\n          primaryColor: '#000',\n          textColor: '#004a14',\n          width: 900,\n          zIndex: 1000\n        }\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      id: \"buttonTour\",\n      onClick: () => this.Joyride.start,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"Click on the Black Button to take Tour\"), '\\n', React.createElement(\"button\", {\n      id: \"buttonVisualizeDijkstra\",\n      onClick: () => this.visualizeDijkstra(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Visualize Dijkstra's Algorithm\"), '\\n', React.createElement(\"button\", {\n      id: \"buttonRefresh\",\n      onClick: () => this.refreshPage(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Reset\"), React.createElement(\"div\", {\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, grid.map((row, rowIdx) => {\n      return React.createElement(\"div\", {\n        key: rowIdx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, row.map((node, nodeIdx) => {\n        const row = node.row,\n              col = node.col,\n              isFinish = node.isFinish,\n              isStart = node.isStart,\n              isWall = node.isWall;\n        return React.createElement(Node, {\n          key: nodeIdx,\n          col: col,\n          isFinish: isFinish,\n          isStart: isStart,\n          isWall: isWall,\n          mouseIsPressed: mouseIsPressed,\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          row: row,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 142\n          },\n          __self: this\n        });\n      }));\n    })));\n  }\n\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n\n  const newNode = _objectSpread({}, node, {\n    isWall: !node.isWall\n  });\n\n  newGrid[row][col] = newNode;\n  return newGrid;\n};","map":{"version":3,"sources":["/Users/james/Desktop/algorithm_/src/PathfindingVisualizer/PathfindingVisualizer.jsx"],"names":["React","Component","Joyride","Node","dijkstra","getNodesInShortestPathOrder","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","constructor","state","grid","mouseIsPressed","steps","target","content","run","componentDidMount","getInitialGrid","setState","handleMouseDown","row","col","newGrid","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","animateDijkstra","visitedNodesInOrder","nodesInShortestPathOrder","i","length","setTimeout","animateShortestPath","node","document","getElementById","className","visualizeDijkstra","startNode","finishNode","x","style","color","refreshPage","window","location","reload","render","options","arrowColor","backgroundColor","overlayColor","primaryColor","textColor","width","zIndex","start","map","rowIdx","nodeIdx","isFinish","isStart","isWall","currentRow","push","createNode","distance","Infinity","isVisited","previousNode","slice","newNode"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport Joyride from 'react-joyride';\nimport Node from './Node/Node';\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\n\nimport './PathfindingVisualizer.css';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      mouseIsPressed: false,\n      steps: [\n      {\n        target: '#buttonTour',\n        content: 'This is my awesome feature!',\n      },\n      {\n        target: '#node-10-15',\n        content: 'This another awesome feature!',\n      }\n      ],\n      run: true\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({grid});\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid, mouseIsPressed: true});\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid});\n  }\n\n  handleMouseUp() {\n    this.setState({mouseIsPressed: false});\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const {grid} = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n    //change the color of BUTTON to red once button is clicked\n    var x = document.getElementById(\"buttonVisualizeDijkstra\");\n    x.style.color = \"red\"; \n  }\n\n  refreshPage() { \n    window.location.reload(); \n  }\n\n  render() {\n    const {grid, mouseIsPressed, steps, run} = this.state;\n\n    return (\n      <> \n        <div>\n        <h1>  Dijkstra's Algorithm Visualize</h1>\n        </div>\n        <Joyride\n          run={run}\n          steps={steps}\n          continuous\n          showProgress\n          showSkipButton\n          styles={{\n            options: {\n              arrowColor: '#e3ffeb',\n              backgroundColor: '#e3ffeb',\n              overlayColor: 'rgba(79, 26, 0, 0.4)',\n              primaryColor: '#000',\n              textColor: '#004a14',\n              width: 900,\n              zIndex: 1000\n            }\n          }}\n        />\n        <button id=\"buttonTour\" onClick={() => this.Joyride.start}>\n           Click on the Black Button to take Tour\n        </button> \n        {'\\n'}    \n        <button id=\"buttonVisualizeDijkstra\" onClick={() => this.visualizeDijkstra()}>\n\n          Visualize Dijkstra's Algorithm\n        </button>\n        {'\\n'}   \n        <button id=\"buttonRefresh\" onClick={() => this.refreshPage()}>\n           Reset\n        </button>\n\n\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const {row, col, isFinish, isStart, isWall} = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\n\n"]},"metadata":{},"sourceType":"module"}