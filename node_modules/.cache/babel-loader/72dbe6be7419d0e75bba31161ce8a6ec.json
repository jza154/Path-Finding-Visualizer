{"ast":null,"code":"import _defineProperty from \"/Users/james/Desktop/algorithm_/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/james/Desktop/algorithm_/src/PathfindingVisualizer/PathfindingVisualizer.jsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport Node from './Node/Node';\nimport { dijkstra, getNodesInShortestPathOrder } from '../algorithms/dijkstra';\nimport Tour from 'reactour';\nimport './PathfindingVisualizer.css';\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n\n    this.toggleShowMore = () => {\n      this.setState(prevState => ({\n        isShowingMore: !prevState.isShowingMore\n      }));\n    };\n\n    this.closeTour = () => {\n      this.setState({\n        isTourOpen: false\n      });\n    };\n\n    this.openTour = () => {\n      this.setState({\n        isTourOpen: true\n      });\n    };\n\n    this.state = {\n      grid: [],\n      isTourOpen: false,\n      isShowingMore: false,\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({\n      grid\n    });\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid,\n      mouseIsPressed: true\n    });\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({\n      grid: newGrid\n    });\n  }\n\n  handleMouseUp() {\n    this.setState({\n      mouseIsPressed: false\n    });\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(\"node-\".concat(node.row, \"-\").concat(node.col)).className = 'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(\"node-\".concat(node.row, \"-\").concat(node.col)).className = 'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const grid = this.state.grid;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder); //change the color of BUTTON to red once button is clicked\n\n    var x = document.getElementById(\"buttonVisualizeDijkstra\");\n    x.style.color = \"red\";\n  }\n\n  refreshPage() {\n    window.location.reload();\n  }\n\n  render() {\n    const _this$state = this.state,\n          grid = _this$state.grid,\n          isTourOpen = _this$state.isTourOpen,\n          isShowingMore = _this$state.isShowingMore,\n          mouseIsPressed = _this$state.mouseIsPressed;\n    return React.createElement(React.Fragment, null, React.createElement(\"button\", {\n      id: \"buttonVisualizeDijkstra\",\n      onClick: () => this.visualizeDijkstra(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, \"Visualize Dijkstra Algorithm\"), '\\n', React.createElement(\"button\", {\n      id: \"buttonRefresh\",\n      onClick: () => this.refreshPage(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, \"Reset\"), React.createElement(\"div\", {\n      className: \"grid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, grid.map((row, rowIdx) => {\n      return React.createElement(\"div\", {\n        key: rowIdx,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, row.map((node, nodeIdx) => {\n        const row = node.row,\n              col = node.col,\n              isFinish = node.isFinish,\n              isStart = node.isStart,\n              isWall = node.isWall;\n        return React.createElement(Node, {\n          key: nodeIdx,\n          col: col,\n          isFinish: isFinish,\n          isStart: isStart,\n          isWall: isWall,\n          mouseIsPressed: mouseIsPressed,\n          onMouseDown: (row, col) => this.handleMouseDown(row, col),\n          onMouseEnter: (row, col) => this.handleMouseEnter(row, col),\n          onMouseUp: () => this.handleMouseUp(),\n          row: row,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 120\n          },\n          __self: this\n        });\n      }));\n    })));\n  }\n\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n\n    grid.push(currentRow);\n  }\n\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n\n  const newNode = _objectSpread({}, node, {\n    isWall: !node.isWall\n  });\n\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst steps = [{\n  selector: '[data-tour=\"my-first-step\"]',\n  content: ({\n    goTo,\n    inDOM\n  }) => React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }, \"Lorem ipsum \", React.createElement(\"button\", {\n    onClick: () => goTo(4),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, \"Go to Step 5\"), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }), inDOM && 'ðŸŽ‰ Look at your step!'),\n  position: 'top',\n  // you could do something like:\n  // position: [160, 250],\n  action: node => {\n    // by using this, focus trap is temporary disabled\n    node.focus();\n    console.log('yup, the target element is also focused!');\n  },\n  style: {\n    backgroundColor: '#bada55'\n  },\n  // Disable interaction for this specific step.\n  // Could be enabled passing `true`\n  // when `disableInteraction` prop is present in Tour\n  stepInteraction: false,\n  // Text read to screen reader software for this step's navigation dot\n  navDotAriaLabel: 'Go to step 4'\n} // ...\n];","map":{"version":3,"sources":["/Users/james/Desktop/algorithm_/src/PathfindingVisualizer/PathfindingVisualizer.jsx"],"names":["React","Component","Node","dijkstra","getNodesInShortestPathOrder","Tour","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","constructor","toggleShowMore","setState","prevState","isShowingMore","closeTour","isTourOpen","openTour","state","grid","mouseIsPressed","componentDidMount","getInitialGrid","handleMouseDown","row","col","newGrid","getNewGridWithWallToggled","handleMouseEnter","handleMouseUp","animateDijkstra","visitedNodesInOrder","nodesInShortestPathOrder","i","length","setTimeout","animateShortestPath","node","document","getElementById","className","visualizeDijkstra","startNode","finishNode","x","style","color","refreshPage","window","location","reload","render","map","rowIdx","nodeIdx","isFinish","isStart","isWall","currentRow","push","createNode","distance","Infinity","isVisited","previousNode","slice","newNode","steps","selector","content","goTo","inDOM","position","action","focus","console","log","backgroundColor","stepInteraction","navDotAriaLabel"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,SAAQC,QAAR,EAAkBC,2BAAlB,QAAoD,wBAApD;AACA,OAAOC,IAAP,MAAiB,UAAjB;AAEA,OAAO,6BAAP;AAEA,MAAMC,cAAc,GAAG,EAAvB;AACA,MAAMC,cAAc,GAAG,EAAvB;AACA,MAAMC,eAAe,GAAG,EAAxB;AACA,MAAMC,eAAe,GAAG,EAAxB;AAEA,eAAe,MAAMC,qBAAN,SAAoCT,SAApC,CAA8C;AAC3DU,EAAAA,WAAW,GAAG;AACZ;;AADY,SAwEdC,cAxEc,GAwEG,MAAM;AACrB,WAAKC,QAAL,CAAcC,SAAS,KAAK;AAC1BC,QAAAA,aAAa,EAAE,CAACD,SAAS,CAACC;AADA,OAAL,CAAvB;AAGD,KA5Ea;;AAAA,SA8EdC,SA9Ec,GA8EF,MAAM;AAChB,WAAKH,QAAL,CAAc;AAAEI,QAAAA,UAAU,EAAE;AAAd,OAAd;AACD,KAhFa;;AAAA,SAkFdC,QAlFc,GAkFH,MAAM;AACf,WAAKL,QAAL,CAAc;AAAEI,QAAAA,UAAU,EAAE;AAAd,OAAd;AACD,KApFa;;AAEZ,SAAKE,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE,EADK;AAEXH,MAAAA,UAAU,EAAE,KAFD;AAGXF,MAAAA,aAAa,EAAE,KAHJ;AAIXM,MAAAA,cAAc,EAAE;AAJL,KAAb;AAMD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,UAAMF,IAAI,GAAGG,cAAc,EAA3B;AACA,SAAKV,QAAL,CAAc;AAACO,MAAAA;AAAD,KAAd;AACD;;AAEDI,EAAAA,eAAe,CAACC,GAAD,EAAMC,GAAN,EAAW;AACxB,UAAMC,OAAO,GAAGC,yBAAyB,CAAC,KAAKT,KAAL,CAAWC,IAAZ,EAAkBK,GAAlB,EAAuBC,GAAvB,CAAzC;AACA,SAAKb,QAAL,CAAc;AAACO,MAAAA,IAAI,EAAEO,OAAP;AAAgBN,MAAAA,cAAc,EAAE;AAAhC,KAAd;AACD;;AAEDQ,EAAAA,gBAAgB,CAACJ,GAAD,EAAMC,GAAN,EAAW;AACzB,QAAI,CAAC,KAAKP,KAAL,CAAWE,cAAhB,EAAgC;AAChC,UAAMM,OAAO,GAAGC,yBAAyB,CAAC,KAAKT,KAAL,CAAWC,IAAZ,EAAkBK,GAAlB,EAAuBC,GAAvB,CAAzC;AACA,SAAKb,QAAL,CAAc;AAACO,MAAAA,IAAI,EAAEO;AAAP,KAAd;AACD;;AAEDG,EAAAA,aAAa,GAAG;AACd,SAAKjB,QAAL,CAAc;AAACQ,MAAAA,cAAc,EAAE;AAAjB,KAAd;AACD;;AAEDU,EAAAA,eAAe,CAACC,mBAAD,EAAsBC,wBAAtB,EAAgD;AAC7D,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIF,mBAAmB,CAACG,MAAzC,EAAiDD,CAAC,EAAlD,EAAsD;AACpD,UAAIA,CAAC,KAAKF,mBAAmB,CAACG,MAA9B,EAAsC;AACpCC,QAAAA,UAAU,CAAC,MAAM;AACf,eAAKC,mBAAL,CAAyBJ,wBAAzB;AACD,SAFS,EAEP,KAAKC,CAFE,CAAV;AAGA;AACD;;AACDE,MAAAA,UAAU,CAAC,MAAM;AACf,cAAME,IAAI,GAAGN,mBAAmB,CAACE,CAAD,CAAhC;AACAK,QAAAA,QAAQ,CAACC,cAAT,gBAAgCF,IAAI,CAACb,GAArC,cAA4Ca,IAAI,CAACZ,GAAjD,GAAwDe,SAAxD,GACE,mBADF;AAED,OAJS,EAIP,KAAKP,CAJE,CAAV;AAKD;AACF;;AAEDG,EAAAA,mBAAmB,CAACJ,wBAAD,EAA2B;AAC5C,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,wBAAwB,CAACE,MAA7C,EAAqDD,CAAC,EAAtD,EAA0D;AACxDE,MAAAA,UAAU,CAAC,MAAM;AACf,cAAME,IAAI,GAAGL,wBAAwB,CAACC,CAAD,CAArC;AACAK,QAAAA,QAAQ,CAACC,cAAT,gBAAgCF,IAAI,CAACb,GAArC,cAA4Ca,IAAI,CAACZ,GAAjD,GAAwDe,SAAxD,GACE,yBADF;AAED,OAJS,EAIP,KAAKP,CAJE,CAAV;AAKD;AACF;;AAEDQ,EAAAA,iBAAiB,GAAG;AAAA,UACXtB,IADW,GACH,KAAKD,KADF,CACXC,IADW;AAElB,UAAMuB,SAAS,GAAGvB,IAAI,CAACd,cAAD,CAAJ,CAAqBC,cAArB,CAAlB;AACA,UAAMqC,UAAU,GAAGxB,IAAI,CAACZ,eAAD,CAAJ,CAAsBC,eAAtB,CAAnB;AACA,UAAMuB,mBAAmB,GAAG7B,QAAQ,CAACiB,IAAD,EAAOuB,SAAP,EAAkBC,UAAlB,CAApC;AACA,UAAMX,wBAAwB,GAAG7B,2BAA2B,CAACwC,UAAD,CAA5D;AACA,SAAKb,eAAL,CAAqBC,mBAArB,EAA0CC,wBAA1C,EANkB,CAOlB;;AACA,QAAIY,CAAC,GAAGN,QAAQ,CAACC,cAAT,CAAwB,yBAAxB,CAAR;AACAK,IAAAA,CAAC,CAACC,KAAF,CAAQC,KAAR,GAAgB,KAAhB;AACD;;AAEDC,EAAAA,WAAW,GAAG;AACZC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACD;;AAgBDC,EAAAA,MAAM,GAAG;AAAA,wBACgD,KAAKjC,KADrD;AAAA,UACAC,IADA,eACAA,IADA;AAAA,UACKH,UADL,eACKA,UADL;AAAA,UACgBF,aADhB,eACgBA,aADhB;AAAA,UAC8BM,cAD9B,eAC8BA,cAD9B;AAGP,WACE,0CACE;AAAQ,MAAA,EAAE,EAAC,yBAAX;AAAqC,MAAA,OAAO,EAAE,MAAM,KAAKqB,iBAAL,EAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCADF,EAIG,IAJH,EAKE;AAAQ,MAAA,EAAE,EAAC,eAAX;AAA2B,MAAA,OAAO,EAAE,MAAM,KAAKM,WAAL,EAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eALF,EASE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG5B,IAAI,CAACiC,GAAL,CAAS,CAAC5B,GAAD,EAAM6B,MAAN,KAAiB;AACzB,aACE;AAAK,QAAA,GAAG,EAAEA,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG7B,GAAG,CAAC4B,GAAJ,CAAQ,CAACf,IAAD,EAAOiB,OAAP,KAAmB;AAAA,cACnB9B,GADmB,GACoBa,IADpB,CACnBb,GADmB;AAAA,cACdC,GADc,GACoBY,IADpB,CACdZ,GADc;AAAA,cACT8B,QADS,GACoBlB,IADpB,CACTkB,QADS;AAAA,cACCC,OADD,GACoBnB,IADpB,CACCmB,OADD;AAAA,cACUC,MADV,GACoBpB,IADpB,CACUoB,MADV;AAE1B,eACE,oBAAC,IAAD;AACE,UAAA,GAAG,EAAEH,OADP;AAEE,UAAA,GAAG,EAAE7B,GAFP;AAGE,UAAA,QAAQ,EAAE8B,QAHZ;AAIE,UAAA,OAAO,EAAEC,OAJX;AAKE,UAAA,MAAM,EAAEC,MALV;AAME,UAAA,cAAc,EAAErC,cANlB;AAOE,UAAA,WAAW,EAAE,CAACI,GAAD,EAAMC,GAAN,KAAc,KAAKF,eAAL,CAAqBC,GAArB,EAA0BC,GAA1B,CAP7B;AAQE,UAAA,YAAY,EAAE,CAACD,GAAD,EAAMC,GAAN,KACZ,KAAKG,gBAAL,CAAsBJ,GAAtB,EAA2BC,GAA3B,CATJ;AAWE,UAAA,SAAS,EAAE,MAAM,KAAKI,aAAL,EAXnB;AAYE,UAAA,GAAG,EAAEL,GAZP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD,OAjBA,CADH,CADF;AAsBD,KAvBA,CADH,CATF,CADF;AAsCD;;AAhI0D;;AAmI7D,MAAMF,cAAc,GAAG,MAAM;AAC3B,QAAMH,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIK,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,EAAxB,EAA4BA,GAAG,EAA/B,EAAmC;AACjC,UAAMkC,UAAU,GAAG,EAAnB;;AACA,SAAK,IAAIjC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,EAAxB,EAA4BA,GAAG,EAA/B,EAAmC;AACjCiC,MAAAA,UAAU,CAACC,IAAX,CAAgBC,UAAU,CAACnC,GAAD,EAAMD,GAAN,CAA1B;AACD;;AACDL,IAAAA,IAAI,CAACwC,IAAL,CAAUD,UAAV;AACD;;AACD,SAAOvC,IAAP;AACD,CAVD;;AAYA,MAAMyC,UAAU,GAAG,CAACnC,GAAD,EAAMD,GAAN,KAAc;AAC/B,SAAO;AACLC,IAAAA,GADK;AAELD,IAAAA,GAFK;AAGLgC,IAAAA,OAAO,EAAEhC,GAAG,KAAKnB,cAAR,IAA0BoB,GAAG,KAAKnB,cAHtC;AAILiD,IAAAA,QAAQ,EAAE/B,GAAG,KAAKjB,eAAR,IAA2BkB,GAAG,KAAKjB,eAJxC;AAKLqD,IAAAA,QAAQ,EAAEC,QALL;AAMLC,IAAAA,SAAS,EAAE,KANN;AAOLN,IAAAA,MAAM,EAAE,KAPH;AAQLO,IAAAA,YAAY,EAAE;AART,GAAP;AAUD,CAXD;;AAaA,MAAMrC,yBAAyB,GAAG,CAACR,IAAD,EAAOK,GAAP,EAAYC,GAAZ,KAAoB;AACpD,QAAMC,OAAO,GAAGP,IAAI,CAAC8C,KAAL,EAAhB;AACA,QAAM5B,IAAI,GAAGX,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,CAAb;;AACA,QAAMyC,OAAO,qBACR7B,IADQ;AAEXoB,IAAAA,MAAM,EAAE,CAACpB,IAAI,CAACoB;AAFH,IAAb;;AAIA/B,EAAAA,OAAO,CAACF,GAAD,CAAP,CAAaC,GAAb,IAAoByC,OAApB;AACA,SAAOxC,OAAP;AACD,CATD;;AAWA,MAAMyC,KAAK,GAAG,CACZ;AACEC,EAAAA,QAAQ,EAAE,6BADZ;AAEEC,EAAAA,OAAO,EAAE,CAAC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAD,KACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACc;AAAQ,IAAA,OAAO,EAAE,MAAMD,IAAI,CAAC,CAAD,CAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADd,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,EAGGC,KAAK,IAAI,uBAHZ,CAHJ;AASEC,EAAAA,QAAQ,EAAE,KATZ;AAUE;AACA;AACAC,EAAAA,MAAM,EAAEpC,IAAI,IAAI;AACd;AACAA,IAAAA,IAAI,CAACqC,KAAL;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,0CAAZ;AACD,GAhBH;AAiBE/B,EAAAA,KAAK,EAAE;AACLgC,IAAAA,eAAe,EAAE;AADZ,GAjBT;AAoBE;AACA;AACA;AACAC,EAAAA,eAAe,EAAE,KAvBnB;AAwBE;AACAC,EAAAA,eAAe,EAAE;AAzBnB,CADY,CA4BZ;AA5BY,CAAd","sourcesContent":["import React, {Component} from 'react';\nimport Node from './Node/Node';\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\nimport Tour from 'reactour'\n\nimport './PathfindingVisualizer.css';\n\nconst START_NODE_ROW = 10;\nconst START_NODE_COL = 15;\nconst FINISH_NODE_ROW = 10;\nconst FINISH_NODE_COL = 35;\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      isTourOpen: false,\n      isShowingMore: false,\n      mouseIsPressed: false\n    };\n  }\n\n  componentDidMount() {\n    const grid = getInitialGrid();\n    this.setState({grid});\n  }\n\n  handleMouseDown(row, col) {\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid, mouseIsPressed: true});\n  }\n\n  handleMouseEnter(row, col) {\n    if (!this.state.mouseIsPressed) return;\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n    this.setState({grid: newGrid});\n  }\n\n  handleMouseUp() {\n    this.setState({mouseIsPressed: false});\n  }\n\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\n      if (i === visitedNodesInOrder.length) {\n        setTimeout(() => {\n          this.animateShortestPath(nodesInShortestPathOrder);\n        }, 10 * i);\n        return;\n      }\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-visited';\n      }, 10 * i);\n    }\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\n      setTimeout(() => {\n        const node = nodesInShortestPathOrder[i];\n        document.getElementById(`node-${node.row}-${node.col}`).className =\n          'node node-shortest-path';\n      }, 50 * i);\n    }\n  }\n\n  visualizeDijkstra() {\n    const {grid} = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\n    //change the color of BUTTON to red once button is clicked\n    var x = document.getElementById(\"buttonVisualizeDijkstra\");\n    x.style.color = \"red\"; \n  }\n\n  refreshPage() { \n    window.location.reload(); \n  }\n\n  toggleShowMore = () => {\n    this.setState(prevState => ({\n      isShowingMore: !prevState.isShowingMore\n    }));\n  };\n\n  closeTour = () => {\n    this.setState({ isTourOpen: false });\n  };\n\n  openTour = () => {\n    this.setState({ isTourOpen: true });\n  };\n\n  render() {\n    const {grid,isTourOpen,isShowingMore,mouseIsPressed} = this.state;\n\n    return (\n      <>      \n        <button id=\"buttonVisualizeDijkstra\" onClick={() => this.visualizeDijkstra()}>\n          Visualize Dijkstra Algorithm\n        </button>\n        {'\\n'} \n        <button id=\"buttonRefresh\" onClick={() => this.refreshPage()}>\n           Reset\n        </button>\n\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const {row, col, isFinish, isStart, isWall} = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      isWall={isWall}\n                      mouseIsPressed={mouseIsPressed}\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\n                      onMouseEnter={(row, col) =>\n                        this.handleMouseEnter(row, col)\n                      }\n                      onMouseUp={() => this.handleMouseUp()}\n                      row={row}></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row < 20; row++) {\n    const currentRow = [];\n    for (let col = 0; col < 50; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    previousNode: null,\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst steps = [\n  {\n    selector: '[data-tour=\"my-first-step\"]',\n    content: ({ goTo, inDOM }) => (\n      <div>\n        Lorem ipsum <button onClick={() => goTo(4)}>Go to Step 5</button>\n        <br />\n        {inDOM && 'ðŸŽ‰ Look at your step!'}\n      </div>\n    ),\n    position: 'top',\n    // you could do something like:\n    // position: [160, 250],\n    action: node => {\n      // by using this, focus trap is temporary disabled\n      node.focus()\n      console.log('yup, the target element is also focused!')\n    },\n    style: {\n      backgroundColor: '#bada55',\n    },\n    // Disable interaction for this specific step.\n    // Could be enabled passing `true`\n    // when `disableInteraction` prop is present in Tour\n    stepInteraction: false,\n    // Text read to screen reader software for this step's navigation dot\n    navDotAriaLabel: 'Go to step 4',\n  },\n  // ...\n]\n"]},"metadata":{},"sourceType":"module"}